name: Playit RDP Tunnel

on:
  workflow_dispatch:

jobs:
  setup-rdp-tunnel:
    runs-on: windows-latest

    steps:
    - name: Check out the repository
      uses: actions/checkout@v2

    - name: Download and Install Playit
      run: |
        Invoke-WebRequest -Uri "https://github.com/playit-cloud/playit-agent/releases/download/v0.15.26/playit-windows-x86_64-signed.exe" -OutFile "$env:USERPROFILE\playit.exe"
        Start-Sleep -Seconds 50  # Give some time for the download to complete

    # Enable RDP (Remote Desktop Protocol)
    - name: Enable TS (RDP)
      run: |
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0
        Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 1
        Set-LocalUser -Name "runneradmin" -Password (ConvertTo-SecureString -AsPlainText "p@ssw0rd!" -Force)

    # Open another port for RDP (e.g., port 3389 -> 3390) if needed
    - name: Open Additional Port for RDP or Playit
      run: |
        # Open an additional RDP port (example port 3390)
        netsh advfirewall firewall add rule name="Allow RDP 3390" dir=in action=allow protocol=TCP localport=3390
        # Open additional ports for Playit or other applications
        netsh advfirewall firewall add rule name="Allow Playit 5000" dir=in action=allow protocol=TCP localport=5000

    - name: Start Playit and Set Up RDP Tunnel
      env:
        PLAYIT_AUTH_KEY: ${{ secrets.PL }} 
      run: |
        # Start Playit with the authentication key
        Start-Process -FilePath "$env:USERPROFILE\playit.exe" -ArgumentList "--secret $env:PLAYIT_AUTH_KEY" -NoNewWindow -Wait
        # Ensure Playit runs continuously in the background
        Start-Process -FilePath "$env:USERPROFILE\playit.exe" -ArgumentList "--secret $env:PLAYIT_AUTH_KEY" -NoNewWindow

    - name: Monitor Playit and Reconnect Tunnel if Closed
      run: |
        # Monitor Playit process and restart if it's closed
        while ($true) {
            $playitProcess = Get-Process -Name "playit" -ErrorAction SilentlyContinue
            if ($null -eq $playitProcess) {
                Write-Host "Playit process is not running. Restarting..."
                Start-Process -FilePath "$env:USERPROFILE\playit.exe" -ArgumentList "--secret $env:PLAYIT_AUTH_KEY" -NoNewWindow
                # Allow time for Playit to restart
                Start-Sleep -Seconds 5
            }
            # Check every 10 seconds for faster detection
            Start-Sleep -Seconds 10  

    # Monitor the Playit process more securely by running it as a Windows service.
    - name: Run Playit as a Service (Secure Method)
      run: |
        # Set Playit as a service to auto-restart if it crashes
        New-Service -Name "PlayitService" -Binary "$env:USERPROFILE\playit.exe" -ArgumentList "--secret $env:PLAYIT_AUTH_KEY" -StartupType Automatic
        Start-Service "PlayitService"

    - name: Keep GitHub Action Runner Alive in Multiple Tabs
      run: |
        # Run a no-op task in the background to keep the runner alive
        Start-Job -ScriptBlock {
            while ($true) {
                Write-Host "Keeping GitHub Actions runner alive..."
                # No operation to ensure runner stays active
                $null = Get-Process 
                Start-Sleep -Seconds 300  # Sleep for 5 minutes
            }
        }

        # Run another PowerShell background job for monitoring Playit
        Start-Job -ScriptBlock {
            while ($true) {
                Write-Host "Monitoring Playit process..."
                $playitProcess = Get-Process -Name "playit" -ErrorAction SilentlyContinue
                if ($null -eq $playitProcess) {
                    Write-Host "Playit process is not running. Restarting..."
                    Start-Process -FilePath "$env:USERPROFILE\playit.exe" -ArgumentList "--secret $env:PLAYIT_AUTH_KEY" -NoNewWindow
                }
                Start-Sleep -Seconds 15  # Check every 15 seconds
            }
        }

        # Wait for background jobs to ensure continuous operation
        while ($true) {
            Start-Sleep -Seconds 60  # Keep the main job running indefinitely
        }
